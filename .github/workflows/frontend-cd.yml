name: frontend-cd

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci
        working-directory: starter/frontend

      - run: npm run lint
        working-directory: starter/frontend

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci
        working-directory: starter/frontend

      - run: npm run test
        working-directory: starter/frontend

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci
        working-directory: starter/frontend

      - run: npm run build -- --build-args REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }}
        working-directory: starter/frontend

      - run: docker build -t frontend:latest --build-arg REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} ./starter/frontend

  push_to_ecr:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
          aws-region: ${{ vars.AWS_REGION }} # Use the region from your environment variables

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          docker build -t ${{ vars.FRONTEND_ECR_REGISTRY }}:${{ github.sha }} .
          docker push ${{ vars.FRONTEND_ECR_REGISTRY }}:${{ github.sha }}
        working-directory: ./starter/frontend

  deploy:
    runs-on: ubuntu-latest
    needs: [push_to_ecr]
    steps:
      - uses: actions/checkout@v2

      - name: Configure kubectl
        run: |
          aws eks --region ${{ vars.AWS_REGION }} update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/frontend frontend=${{ vars.FRONTEND_ECR_REGISTRY }}:${{ github.sha }}
          kubectl rollout status deployment/frontend