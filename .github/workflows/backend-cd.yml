name: backend-cd

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('starter/backend/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - run: pip install pipenv
        working-directory: starter/backend

      - run: pipenv install --dev
        working-directory: starter/backend

      - run: pipenv run lint
        working-directory: starter/backend

  test:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('starter/backend/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - run: pip install pipenv
        working-directory: starter/backend

      - run: pipenv install --dev
        working-directory: starter/backend

      - run: pipenv run test
        working-directory: starter/backend

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v2

      - run: docker build -t backend:latest .
        working-directory: ./starter/backend

  push_to_ecr:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ env.AWS_REGION }}

      - name: Build, tag, and push Docker image
        run: |
          docker tag backend:latest ${{ env.BACKEND_ECR_REGISTRY }}:${{ github.sha }}
          docker push ${{ env.BACKEND_ECR_REGISTRY }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [push_to_ecr]
    steps:
      - uses: actions/checkout@v2

      - name: Configure kubectl
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/backend backend=${{ env.BACKEND_ECR_REGISTRY }}:${{ github.sha }}
          kubectl rollout status deployment/backend